//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.17

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_name: String,
    pub hashed_password: String,
    pub email: Option<String>,
    pub first_name: String,
    pub last_name: String,
    pub created_at: DateTime,
    pub bills_created: Option<i32>,
    pub bills_joined: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bills::Entity")]
    Bills,
    #[sea_orm(has_many = "super::user_bills_joined::Entity")]
    UserBillsJoined,
}

impl Related<super::user_bills_joined::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserBillsJoined.def()
    }
}

impl Related<super::bills::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_bills_joined::Relation::Bills.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_bills_joined::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
